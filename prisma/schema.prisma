// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PdfFile {
  id         String    @id @default(uuid())
  name       String
  mimeType   String
  data       Bytes
  createdAt  DateTime  @default(now())
  lastAccess DateTime?
  notes      Note[]
  lastPage   Int       @default(1)
}

model Note {
  id             String   @id @default(uuid())
  pdfId          String
  content        String
  pdfFile        PdfFile  @relation(fields: [pdfId], references: [id])
  createdAt      DateTime @default(now())
  colorCode      String
  size           Int
  page           Int
  isBold         Boolean  @default(false)
  quote          String
  highlightAreas Json
}

// Auth.js
model Account {
  id                       String  @id @default(uuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  password      String?
  roles         String[]  @default(["user"])
  isActive      Boolean   @default(true)
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
